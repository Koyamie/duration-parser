// duration-parser 1.0.2
// https://github.com/jamestalmage/duration-parser

var parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = "0",
        peg$c1 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c2 = function() { return 0; },
        peg$c3 = peg$FAILED,
        peg$c4 = [],
        peg$c5 = function(left, right) { return left + right; },
        peg$c6 = "+",
        peg$c7 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c8 = function(time) { return time; },
        peg$c9 = "-",
        peg$c10 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c11 = function(time) { return -time; },
        peg$c12 = void 0,
        peg$c13 = /^['+''-']/,
        peg$c14 = { type: "class", value: "['+''-']", description: "['+''-']" },
        peg$c15 = function(num, mult) { return num * mult; },
        peg$c16 = "ms",
        peg$c17 = { type: "literal", value: "ms", description: "\"ms\"" },
        peg$c18 = "milliseconds",
        peg$c19 = { type: "literal", value: "milliseconds", description: "\"milliseconds\"" },
        peg$c20 = "millisecond",
        peg$c21 = { type: "literal", value: "millisecond", description: "\"millisecond\"" },
        peg$c22 = "millisecondes",
        peg$c23 = { type: "literal", value: "millisecondes", description: "\"millisecondes\"" },
        peg$c24 = "milisegundos",
        peg$c25 = { type: "literal", value: "milisegundos", description: "\"milisegundos\"" },
        peg$c26 = "milisegundo",
        peg$c27 = { type: "literal", value: "milisegundo", description: "\"milisegundo\"" },
        peg$c28 = function() { return 1; },
        peg$c29 = "seconds",
        peg$c30 = { type: "literal", value: "seconds", description: "\"seconds\"" },
        peg$c31 = "second",
        peg$c32 = { type: "literal", value: "second", description: "\"second\"" },
        peg$c33 = "secs",
        peg$c34 = { type: "literal", value: "secs", description: "\"secs\"" },
        peg$c35 = "sec",
        peg$c36 = { type: "literal", value: "sec", description: "\"sec\"" },
        peg$c37 = "s",
        peg$c38 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c39 = "secondes",
        peg$c40 = { type: "literal", value: "secondes", description: "\"secondes\"" },
        peg$c41 = "segundos",
        peg$c42 = { type: "literal", value: "segundos", description: "\"segundos\"" },
        peg$c43 = "segundo",
        peg$c44 = { type: "literal", value: "segundo", description: "\"segundo\"" },
        peg$c45 = function() { return 1000; },
        peg$c46 = "minutes",
        peg$c47 = { type: "literal", value: "minutes", description: "\"minutes\"" },
        peg$c48 = "minute",
        peg$c49 = { type: "literal", value: "minute", description: "\"minute\"" },
        peg$c50 = "mins",
        peg$c51 = { type: "literal", value: "mins", description: "\"mins\"" },
        peg$c52 = "min",
        peg$c53 = { type: "literal", value: "min", description: "\"min\"" },
        peg$c54 = "m",
        peg$c55 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c56 = "minutos",
        peg$c57 = { type: "literal", value: "minutos", description: "\"minutos\"" },
        peg$c58 = "minuto",
        peg$c59 = { type: "literal", value: "minuto", description: "\"minuto\"" },
        peg$c60 = function() { return 60000; },
        peg$c61 = "hours",
        peg$c62 = { type: "literal", value: "hours", description: "\"hours\"" },
        peg$c63 = "hour",
        peg$c64 = { type: "literal", value: "hour", description: "\"hour\"" },
        peg$c65 = "hrs",
        peg$c66 = { type: "literal", value: "hrs", description: "\"hrs\"" },
        peg$c67 = "hr",
        peg$c68 = { type: "literal", value: "hr", description: "\"hr\"" },
        peg$c69 = "h",
        peg$c70 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c71 = "heures",
        peg$c72 = { type: "literal", value: "heures", description: "\"heures\"" },
        peg$c73 = "heure",
        peg$c74 = { type: "literal", value: "heure", description: "\"heure\"" },
        peg$c75 = "horas",
        peg$c76 = { type: "literal", value: "horas", description: "\"horas\"" },
        peg$c77 = "hora",
        peg$c78 = { type: "literal", value: "hora", description: "\"hora\"" },
        peg$c79 = function() { return 3600000; },
        peg$c80 = "days",
        peg$c81 = { type: "literal", value: "days", description: "\"days\"" },
        peg$c82 = "day",
        peg$c83 = { type: "literal", value: "day", description: "\"day\"" },
        peg$c84 = "d",
        peg$c85 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c86 = "jours",
        peg$c87 = { type: "literal", value: "jours", description: "\"jours\"" },
        peg$c88 = "jour",
        peg$c89 = { type: "literal", value: "jour", description: "\"jour\"" },
        peg$c90 = "j",
        peg$c91 = { type: "literal", value: "j", description: "\"j\"" },
        peg$c92 = "d\xEDas",
        peg$c93 = { type: "literal", value: "d\xEDas", description: "\"d\\xEDas\"" },
        peg$c94 = "d\xEDa",
        peg$c95 = { type: "literal", value: "d\xEDa", description: "\"d\\xEDa\"" },
        peg$c96 = function() { return 86400000; },
        peg$c97 = "weeks",
        peg$c98 = { type: "literal", value: "weeks", description: "\"weeks\"" },
        peg$c99 = "week",
        peg$c100 = { type: "literal", value: "week", description: "\"week\"" },
        peg$c101 = "wks",
        peg$c102 = { type: "literal", value: "wks", description: "\"wks\"" },
        peg$c103 = "wk",
        peg$c104 = { type: "literal", value: "wk", description: "\"wk\"" },
        peg$c105 = "w",
        peg$c106 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c107 = "semaines",
        peg$c108 = { type: "literal", value: "semaines", description: "\"semaines\"" },
        peg$c109 = "semaine",
        peg$c110 = { type: "literal", value: "semaine", description: "\"semaine\"" },
        peg$c111 = "semanas",
        peg$c112 = { type: "literal", value: "semanas", description: "\"semanas\"" },
        peg$c113 = "semana",
        peg$c114 = { type: "literal", value: "semana", description: "\"semana\"" },
        peg$c115 = "sem",
        peg$c116 = { type: "literal", value: "sem", description: "\"sem\"" },
        peg$c117 = "smn",
        peg$c118 = { type: "literal", value: "smn", description: "\"smn\"" },
        peg$c119 = function() { return 604800000; },
        peg$c120 = "months",
        peg$c121 = { type: "literal", value: "months", description: "\"months\"" },
        peg$c122 = "month",
        peg$c123 = { type: "literal", value: "month", description: "\"month\"" },
        peg$c124 = "mos",
        peg$c125 = { type: "literal", value: "mos", description: "\"mos\"" },
        peg$c126 = "mois",
        peg$c127 = { type: "literal", value: "mois", description: "\"mois\"" },
        peg$c128 = "meses",
        peg$c129 = { type: "literal", value: "meses", description: "\"meses\"" },
        peg$c130 = "mes",
        peg$c131 = { type: "literal", value: "mes", description: "\"mes\"" },
        peg$c132 = function() { return 2629800000; },
        peg$c133 = "years",
        peg$c134 = { type: "literal", value: "years", description: "\"years\"" },
        peg$c135 = "year",
        peg$c136 = { type: "literal", value: "year", description: "\"year\"" },
        peg$c137 = "yrs",
        peg$c138 = { type: "literal", value: "yrs", description: "\"yrs\"" },
        peg$c139 = "yr",
        peg$c140 = { type: "literal", value: "yr", description: "\"yr\"" },
        peg$c141 = "y",
        peg$c142 = { type: "literal", value: "y", description: "\"y\"" },
        peg$c143 = "ans",
        peg$c144 = { type: "literal", value: "ans", description: "\"ans\"" },
        peg$c145 = "an",
        peg$c146 = { type: "literal", value: "an", description: "\"an\"" },
        peg$c147 = "a\xF1os",
        peg$c148 = { type: "literal", value: "a\xF1os", description: "\"a\\xF1os\"" },
        peg$c149 = "a\xF1o",
        peg$c150 = { type: "literal", value: "a\xF1o", description: "\"a\\xF1o\"" },
        peg$c151 = function() { return 31557600000; },
        peg$c152 = /^[' '\t]/,
        peg$c153 = { type: "class", value: "[' '\\t]", description: "[' '\\t]" },
        peg$c154 = { type: "other", description: "integer" },
        peg$c155 = /^[0-9]/,
        peg$c156 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c157 = function() { return parseInt(text(), 10); },
        peg$c158 = { type: "other", description: "float" },
        peg$c159 = ".",
        peg$c160 = { type: "literal", value: ".", description: "\".\"" },
        peg$c161 = function() { return parseFloat(text(), 10); },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$parsetime();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c2();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetime() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesigned();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesep();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesep();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetime();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsesigned();
      }

      return s0;
    }

    function peg$parsesigned() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesep();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesep();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetimestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c9;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsesep();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsesep();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetimestring();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c11(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsetimestring();
        }
      }

      return s0;
    }

    function peg$parsetimestring() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetimechunk();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsesep();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsesep();
        }
        if (s5 !== peg$FAILED) {
          if (peg$c13.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c12;
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$c12;
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsesep();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesep();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetimestring();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimechunk();
      }

      return s0;
    }

    function peg$parsetimechunk() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesep();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesep();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemultiplier();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsemultiplier() {
      var s0;

      s0 = peg$parsemonths();
      if (s0 === peg$FAILED) {
        s0 = peg$parseweeks();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemilliseconds();
          if (s0 === peg$FAILED) {
            s0 = peg$parseseconds();
            if (s0 === peg$FAILED) {
              s0 = peg$parseminutes();
              if (s0 === peg$FAILED) {
                s0 = peg$parsehours();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedays();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseyears();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemilliseconds() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c16) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c18) {
          s1 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c20) {
            s1 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c22) {
              s1 = input.substr(peg$currPos, 13);
              peg$currPos += 13;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 12).toLowerCase() === peg$c24) {
                s1 = input.substr(peg$currPos, 12);
                peg$currPos += 12;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c26) {
                  s1 = input.substr(peg$currPos, 11);
                  peg$currPos += 11;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c28();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseseconds() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c29) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c33) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c37) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c39) {
                  s1 = input.substr(peg$currPos, 8);
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c41) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c43) {
                      s1 = input.substr(peg$currPos, 7);
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c45();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseminutes() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c46) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c48) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c50) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c52) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c54) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c56) {
                  s1 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c58) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehours() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c61) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c63) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c69) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c71) {
                  s1 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c72); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c73) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c74); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c75) {
                      s1 = input.substr(peg$currPos, 5);
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c76); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {
                        s1 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c78); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c79();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedays() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c80) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c82) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c84) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c86) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c88) {
                s1 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c90) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c92) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c94) {
                      s1 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c95); }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c96();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseweeks() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c97) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c99) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c101) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c105) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c107) {
                  s1 = input.substr(peg$currPos, 8);
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c109) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c111) {
                      s1 = input.substr(peg$currPos, 7);
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c112); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c113) {
                        s1 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c114); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c115) {
                          s1 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c116); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c117) {
                            s1 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c118); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c119();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemonths() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c120) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c122) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c124) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c125); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c126) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c128) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c129); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c130) {
                  s1 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c131); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c132();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseyears() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c133) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c135) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c137) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c138); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c139) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c141) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c143) {
                  s1 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c144); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c145) {
                    s1 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c146); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c147) {
                      s1 = input.substr(peg$currPos, 4);
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c148); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c149) {
                        s1 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c150); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c151();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesep() {
      var s0;

      if (peg$c152.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0;

      s0 = peg$parsefloat();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinteger();
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c157();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }

      return s0;
    }

    function peg$parsefloat() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c155.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c159;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c155.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c156); }
              }
            }
          } else {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c161();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

parser.parse.SyntaxError = parser.SyntaxError;
module.exports = parser.parse.bind(parser);
