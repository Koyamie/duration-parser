// duration-parser 2.1.0
// https://github.com/jamestalmage/duration-parser

const parser = // @generated by Peggy 4.2.0.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "0";
  var peg$c1 = "+";
  var peg$c2 = "-";
  var peg$c3 = "milliseconds";
  var peg$c4 = "millisecond";
  var peg$c5 = "millisecondes";
  var peg$c6 = "milissegundos";
  var peg$c7 = "milisegundos";
  var peg$c8 = "milissegundo";
  var peg$c9 = "milisegundo";
  var peg$c10 = "ms";
  var peg$c11 = "secondes";
  var peg$c12 = "segundos";
  var peg$c13 = "seconds";
  var peg$c14 = "segundo";
  var peg$c15 = "second";
  var peg$c16 = "secs";
  var peg$c17 = "sec";
  var peg$c18 = "s";
  var peg$c19 = "minutes";
  var peg$c20 = "minute";
  var peg$c21 = "minutos";
  var peg$c22 = "minuto";
  var peg$c23 = "mins";
  var peg$c24 = "min";
  var peg$c25 = "m";
  var peg$c26 = "hours";
  var peg$c27 = "heures";
  var peg$c28 = "horas";
  var peg$c29 = "hour";
  var peg$c30 = "heure";
  var peg$c31 = "hora";
  var peg$c32 = "hrs";
  var peg$c33 = "hr";
  var peg$c34 = "h";
  var peg$c35 = "days";
  var peg$c36 = "jours";
  var peg$c37 = "d\xEDas";
  var peg$c38 = "dias";
  var peg$c39 = "jour";
  var peg$c40 = "d\xEDa";
  var peg$c41 = "dia";
  var peg$c42 = "day";
  var peg$c43 = "weeks";
  var peg$c44 = "semaines";
  var peg$c45 = "semanas";
  var peg$c46 = "semaine";
  var peg$c47 = "semana";
  var peg$c48 = "week";
  var peg$c49 = "sem";
  var peg$c50 = "smn";
  var peg$c51 = "wks";
  var peg$c52 = "wk";
  var peg$c53 = "w";
  var peg$c54 = "months";
  var peg$c55 = "month";
  var peg$c56 = "meses";
  var peg$c57 = "mois";
  var peg$c58 = "m\xEAs";
  var peg$c59 = "mes";
  var peg$c60 = "mos";
  var peg$c61 = "years";
  var peg$c62 = "a\xF1os";
  var peg$c63 = "anos";
  var peg$c64 = "year";
  var peg$c65 = "a\xF1o";
  var peg$c66 = "ano";
  var peg$c67 = "ans";
  var peg$c68 = "yrs";
  var peg$c69 = "yr";
  var peg$c70 = "an";
  var peg$c71 = "y";
  var peg$c72 = ".";

  var peg$r0 = /^['+''-']/;
  var peg$r1 = /^[dj]/i;
  var peg$r2 = /^[' '\t]/;
  var peg$r3 = /^[0-9]/;

  var peg$e0 = peg$literalExpectation("0", false);
  var peg$e1 = peg$literalExpectation("+", false);
  var peg$e2 = peg$literalExpectation("-", false);
  var peg$e3 = peg$classExpectation(["'", "+", "'", ["'", "'"]], false, false);
  var peg$e4 = peg$literalExpectation("milliseconds", true);
  var peg$e5 = peg$literalExpectation("millisecond", true);
  var peg$e6 = peg$literalExpectation("millisecondes", true);
  var peg$e7 = peg$literalExpectation("milissegundos", true);
  var peg$e8 = peg$literalExpectation("milisegundos", true);
  var peg$e9 = peg$literalExpectation("milissegundo", true);
  var peg$e10 = peg$literalExpectation("milisegundo", true);
  var peg$e11 = peg$literalExpectation("ms", true);
  var peg$e12 = peg$literalExpectation("secondes", true);
  var peg$e13 = peg$literalExpectation("segundos", true);
  var peg$e14 = peg$literalExpectation("seconds", true);
  var peg$e15 = peg$literalExpectation("segundo", true);
  var peg$e16 = peg$literalExpectation("second", true);
  var peg$e17 = peg$literalExpectation("secs", true);
  var peg$e18 = peg$literalExpectation("sec", true);
  var peg$e19 = peg$literalExpectation("s", true);
  var peg$e20 = peg$literalExpectation("minutes", true);
  var peg$e21 = peg$literalExpectation("minute", true);
  var peg$e22 = peg$literalExpectation("minutos", true);
  var peg$e23 = peg$literalExpectation("minuto", true);
  var peg$e24 = peg$literalExpectation("mins", true);
  var peg$e25 = peg$literalExpectation("min", true);
  var peg$e26 = peg$literalExpectation("m", true);
  var peg$e27 = peg$literalExpectation("hours", true);
  var peg$e28 = peg$literalExpectation("heures", true);
  var peg$e29 = peg$literalExpectation("horas", true);
  var peg$e30 = peg$literalExpectation("hour", true);
  var peg$e31 = peg$literalExpectation("heure", true);
  var peg$e32 = peg$literalExpectation("hora", true);
  var peg$e33 = peg$literalExpectation("hrs", true);
  var peg$e34 = peg$literalExpectation("hr", true);
  var peg$e35 = peg$literalExpectation("h", true);
  var peg$e36 = peg$literalExpectation("days", true);
  var peg$e37 = peg$literalExpectation("jours", true);
  var peg$e38 = peg$literalExpectation("d\xEDas", true);
  var peg$e39 = peg$literalExpectation("dias", true);
  var peg$e40 = peg$literalExpectation("jour", true);
  var peg$e41 = peg$literalExpectation("d\xEDa", true);
  var peg$e42 = peg$literalExpectation("dia", true);
  var peg$e43 = peg$literalExpectation("day", true);
  var peg$e44 = peg$classExpectation(["d", "j"], false, true);
  var peg$e45 = peg$literalExpectation("weeks", true);
  var peg$e46 = peg$literalExpectation("semaines", true);
  var peg$e47 = peg$literalExpectation("semanas", true);
  var peg$e48 = peg$literalExpectation("semaine", true);
  var peg$e49 = peg$literalExpectation("semana", true);
  var peg$e50 = peg$literalExpectation("week", true);
  var peg$e51 = peg$literalExpectation("sem", true);
  var peg$e52 = peg$literalExpectation("smn", true);
  var peg$e53 = peg$literalExpectation("wks", true);
  var peg$e54 = peg$literalExpectation("wk", true);
  var peg$e55 = peg$literalExpectation("w", true);
  var peg$e56 = peg$literalExpectation("months", true);
  var peg$e57 = peg$literalExpectation("month", true);
  var peg$e58 = peg$literalExpectation("meses", true);
  var peg$e59 = peg$literalExpectation("mois", true);
  var peg$e60 = peg$literalExpectation("m\xEAs", true);
  var peg$e61 = peg$literalExpectation("mes", true);
  var peg$e62 = peg$literalExpectation("mos", true);
  var peg$e63 = peg$literalExpectation("years", true);
  var peg$e64 = peg$literalExpectation("a\xF1os", true);
  var peg$e65 = peg$literalExpectation("anos", true);
  var peg$e66 = peg$literalExpectation("year", true);
  var peg$e67 = peg$literalExpectation("a\xF1o", true);
  var peg$e68 = peg$literalExpectation("ano", true);
  var peg$e69 = peg$literalExpectation("ans", true);
  var peg$e70 = peg$literalExpectation("yrs", true);
  var peg$e71 = peg$literalExpectation("yr", true);
  var peg$e72 = peg$literalExpectation("an", true);
  var peg$e73 = peg$literalExpectation("y", true);
  var peg$e74 = peg$classExpectation(["'", " ", "'", "\t"], false, false);
  var peg$e75 = peg$otherExpectation("integer");
  var peg$e76 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e77 = peg$otherExpectation("float");
  var peg$e78 = peg$literalExpectation(".", false);

  var peg$f0 = function() { return 0; };
  var peg$f1 = function(left, right) { return left + right; };
  var peg$f2 = function(time) { return time; };
  var peg$f3 = function(time) { return -time; };
  var peg$f4 = function(left, right) { return left + right; };
  var peg$f5 = function(num, mult) { return num * mult; };
  var peg$f6 = function() { return 1; };
  var peg$f7 = function() { return 1000; };
  var peg$f8 = function() { return 60000; };
  var peg$f9 = function() { return 3600000; };
  var peg$f10 = function() { return 86400000; };
  var peg$f11 = function() { return 604800000; };
  var peg$f12 = function() { return 2629800000; };
  var peg$f13 = function() { return 31557600000; };
  var peg$f14 = function() { return parseInt(text(), 10); };
  var peg$f15 = function() { return parseFloat(text(), 10); };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$parsetime();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c0;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f0();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetime() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesigned();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesep();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesep();
      }
      s3 = peg$parsetime();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesigned();
    }

    return s0;
  }

  function peg$parsesigned() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesep();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesep();
      }
      s3 = peg$parsetimestring();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesep();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesep();
        }
        s3 = peg$parsetimestring();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetimestring();
      }
    }

    return s0;
  }

  function peg$parsetimestring() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsetimechunk();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parsesep();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parsesep();
      }
      s6 = input.charAt(peg$currPos);
      if (peg$r0.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesep();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesep();
        }
        s4 = peg$parsetimestring();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsetimechunk();
    }

    return s0;
  }

  function peg$parsetimechunk() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesep();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesep();
      }
      s3 = peg$parsemultiplier();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplier() {
    var s0;

    s0 = peg$parsemonths();
    if (s0 === peg$FAILED) {
      s0 = peg$parseweeks();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemilliseconds();
        if (s0 === peg$FAILED) {
          s0 = peg$parseseconds();
          if (s0 === peg$FAILED) {
            s0 = peg$parseminutes();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehours();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedays();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseyears();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemilliseconds() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 12);
    if (s1.toLowerCase() === peg$c3) {
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 11);
      if (s1.toLowerCase() === peg$c4) {
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 13);
        if (s1.toLowerCase() === peg$c5) {
          peg$currPos += 13;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 13);
          if (s1.toLowerCase() === peg$c6) {
            peg$currPos += 13;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 12);
            if (s1.toLowerCase() === peg$c7) {
              peg$currPos += 12;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 12);
              if (s1.toLowerCase() === peg$c8) {
                peg$currPos += 12;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 11);
                if (s1.toLowerCase() === peg$c9) {
                  peg$currPos += 11;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 2);
                  if (s1.toLowerCase() === peg$c10) {
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseseconds() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 12);
    if (s1.toLowerCase() === peg$c3) {
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 8);
      if (s1.toLowerCase() === peg$c11) {
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 8);
        if (s1.toLowerCase() === peg$c12) {
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 7);
          if (s1.toLowerCase() === peg$c13) {
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 7);
            if (s1.toLowerCase() === peg$c14) {
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 6);
              if (s1.toLowerCase() === peg$c15) {
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c16) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 3);
                  if (s1.toLowerCase() === peg$c17) {
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.charAt(peg$currPos);
                    if (s1.toLowerCase() === peg$c18) {
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e19); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseminutes() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 7);
    if (s1.toLowerCase() === peg$c19) {
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 6);
      if (s1.toLowerCase() === peg$c20) {
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 7);
        if (s1.toLowerCase() === peg$c21) {
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 6);
          if (s1.toLowerCase() === peg$c22) {
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c23) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c24) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.charAt(peg$currPos);
                if (s1.toLowerCase() === peg$c25) {
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e26); }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehours() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c26) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 6);
      if (s1.toLowerCase() === peg$c27) {
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c28) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c29) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 5);
            if (s1.toLowerCase() === peg$c30) {
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e31); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c31) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e32); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c32) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 2);
                  if (s1.toLowerCase() === peg$c33) {
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e34); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.charAt(peg$currPos);
                    if (s1.toLowerCase() === peg$c34) {
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e35); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedays() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c35) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c36) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c37) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c38) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c39) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c40) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c41) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e42); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 3);
                  if (s1.toLowerCase() === peg$c42) {
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e43); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.charAt(peg$currPos);
                    if (peg$r1.test(s1)) {
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e44); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseweeks() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c43) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 8);
      if (s1.toLowerCase() === peg$c44) {
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 7);
        if (s1.toLowerCase() === peg$c45) {
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 7);
          if (s1.toLowerCase() === peg$c46) {
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 6);
            if (s1.toLowerCase() === peg$c47) {
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c48) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c49) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 3);
                  if (s1.toLowerCase() === peg$c50) {
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.substr(peg$currPos, 3);
                    if (s1.toLowerCase() === peg$c51) {
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e53); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = input.substr(peg$currPos, 2);
                      if (s1.toLowerCase() === peg$c52) {
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e54); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = input.charAt(peg$currPos);
                        if (s1.toLowerCase() === peg$c53) {
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e55); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemonths() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c54) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c55) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c56) {
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c57) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 3);
            if (s1.toLowerCase() === peg$c58) {
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e60); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c59) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e61); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c60) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e62); }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseyears() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c61) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c62) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c63) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c64) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e66); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 3);
            if (s1.toLowerCase() === peg$c65) {
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e67); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c66) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e68); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 3);
                if (s1.toLowerCase() === peg$c67) {
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e69); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 3);
                  if (s1.toLowerCase() === peg$c68) {
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e70); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.substr(peg$currPos, 2);
                    if (s1.toLowerCase() === peg$c69) {
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e71); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = input.substr(peg$currPos, 2);
                      if (s1.toLowerCase() === peg$c70) {
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e72); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = input.charAt(peg$currPos);
                        if (s1.toLowerCase() === peg$c71) {
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e73); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesep() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0;

    s0 = peg$parsefloat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinteger();
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e76); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r3.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c72;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r3.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r3.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e76); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;

parser.parse.SyntaxError = parser.SyntaxError;
export const durationParser = parser.parse.bind(parser);
export const parseDuration = durationParser;